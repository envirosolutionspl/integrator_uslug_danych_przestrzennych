# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WebServicePluginDialog
                                 A QGIS plugin
 Wtyczka umożliwia prezentację danych z serwisów WMS, WMTS, WFS i WCS w postaci warstw w QGIS. Wtyczka wykorzystuje dane z Ewidencji Zbiorów i Usług oraz strony geoportal.gov.pl
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-08-28
        git sha              : $Format:%H$
        copyright            : (C) 2024 by EnviroSolutions Sp. z o.o.
        email                : office@envirosolutions.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import re

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'web_service_plugin_dialog_base.ui'))


class WebServicePluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(WebServicePluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
 
        self.comboBox_gminy = self.comboBox_gminy
        self.comboBox_powiaty = self.comboBox_powiaty
        self.comboBox_wojewodztwa = self.comboBox_wojewodztwa



        self.load_administrative_division('gminy.txt')   
        self.comboBox_gminy.currentIndexChanged.connect(self.on_combobox_gminy_changed)
        self.comboBox_powiaty.currentIndexChanged.connect(self.on_combobox_powiaty_changed)
        self.comboBox_wojewodztwa.currentIndexChanged.connect(self.on_combobox_wojewodztwa_changed)


    def load_administrative_division(self, path): 
        self.devision_dict = {}
        
        with open(path, 'r', encoding='utf-8') as infile:
            next(infile)
            for line in infile:
                info = line.split('\t')

                if info[0] not in self.devision_dict:
                    self.devision_dict[info[0]] = {info[1] : [info[2]]}
                elif info[1] not in self.devision_dict[info[0] ]:
                    self.devision_dict[info[0]][info[1]] = [info[2]]
                else: 
                    self.devision_dict[info[0]][info[1]].append(info[2])
        
        self.comboBox_wojewodztwa.addItems(['województwo'] + sorted(self.devision_dict.keys()))
        self.comboBox_powiaty.addItems(['powiat'])
        self.comboBox_gminy.addItems(['gmina'])
        

    def on_combobox_gminy_changed(self):
        selected_option = self.comboBox_gminy.currentText()
        #todo

    def on_combobox_powiaty_changed(self):
        selected_option = self.comboBox_powiaty.currentText()
        if selected_option == 'powiat':
            self.comboBox_gminy.clear()
            self.comboBox_gminy.addItems(['gmina'])
        else:
            wojewodztwo = self.comboBox_wojewodztwa.currentText()
            gminy = sorted(self.devision_dict[wojewodztwo][selected_option])
            self.comboBox_gminy.clear()
            self.comboBox_gminy.addItems(['gmina'] + gminy)


    def on_combobox_wojewodztwa_changed(self):
        selected_option = self.comboBox_wojewodztwa.currentText()
        if selected_option == 'województwo':
            self.comboBox_powiaty.clear()
            self.comboBox_powiaty.addItems(['powiat'])
        else:
            powiaty = sorted(self.devision_dict[selected_option].keys())
            self.comboBox_powiaty.clear()
            self.comboBox_powiaty.addItems(['powiat'] + powiaty)
        self.on_combobox_powiaty_changed()


